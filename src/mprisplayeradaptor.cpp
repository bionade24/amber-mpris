/*
 * Copyright (C) 2015-2021 Jolla Ltd.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * This file was initially generated by qdbusxml2cpp version 0.8
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 */

#include "mprisplayeradaptor_p.h"
#include "mprisplayer.h"
#include "mprisplayer_p.h"
#include "mprismetadata_p.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

using namespace Amber;

/*
 * Implementation of adaptor class MprisPlayerAdaptor
 */

MprisPlayerAdaptor::MprisPlayerAdaptor(MprisPlayerPrivate *parent)
    : QDBusAbstractAdaptor(parent)
    , m_playerPrivate(parent)
{
    setAutoRelaySignals(true);
}

MprisPlayerAdaptor::~MprisPlayerAdaptor()
{
}

bool MprisPlayerAdaptor::canControl() const
{
    return m_playerPrivate->q_ptr->canControl();
}

bool MprisPlayerAdaptor::canGoNext() const
{
    return m_playerPrivate->q_ptr->canGoNext();
}

bool MprisPlayerAdaptor::canGoPrevious() const
{
    return m_playerPrivate->q_ptr->canGoPrevious();
}

bool MprisPlayerAdaptor::canPause() const
{
    return m_playerPrivate->q_ptr->canPause();
}

bool MprisPlayerAdaptor::canPlay() const
{
    return m_playerPrivate->q_ptr->canPlay();
}

bool MprisPlayerAdaptor::canSeek() const
{
    return m_playerPrivate->q_ptr->canSeek();
}

QString MprisPlayerAdaptor::loopStatus() const
{
    return m_playerPrivate->loopStatus();
}

void MprisPlayerAdaptor::setLoopStatus(const QString &value)
{
    m_playerPrivate->setLoopStatus(value);
}

double MprisPlayerAdaptor::maximumRate() const
{
    return m_playerPrivate->q_ptr->maximumRate();
}

QVariantMap MprisPlayerAdaptor::metadata() const
{
    return m_playerPrivate->metaData();
}

double MprisPlayerAdaptor::minimumRate() const
{
    return m_playerPrivate->q_ptr->minimumRate();
}

QString MprisPlayerAdaptor::playbackStatus() const
{
    return m_playerPrivate->playbackStatus();
}

qlonglong MprisPlayerAdaptor::position() const
{
    return m_playerPrivate->position();
}

double MprisPlayerAdaptor::rate() const
{
    return m_playerPrivate->q_ptr->rate();
}

void MprisPlayerAdaptor::setRate(double value)
{
    m_playerPrivate->setRate(value);
}

bool MprisPlayerAdaptor::shuffle() const
{
    return m_playerPrivate->q_ptr->shuffle();
}

void MprisPlayerAdaptor::setShuffle(bool value)
{
    m_playerPrivate->setShuffle(value);
}

double MprisPlayerAdaptor::volume() const
{
    return m_playerPrivate->q_ptr->volume();
}

void MprisPlayerAdaptor::setVolume(double value)
{
    m_playerPrivate->setVolume(value);
}

void MprisPlayerAdaptor::Next()
{
    // handle method call org.mpris.MediaPlayer2.Player.Next
    m_playerPrivate->Next();
}

void MprisPlayerAdaptor::OpenUri(const QString &Uri)
{
    m_playerPrivate->OpenUri(Uri);
}

void MprisPlayerAdaptor::Pause()
{
    // handle method call org.mpris.MediaPlayer2.Player.Pause
    m_playerPrivate->Pause();
}

void MprisPlayerAdaptor::Play()
{
    // handle method call org.mpris.MediaPlayer2.Player.Play
    m_playerPrivate->Play();
}

void MprisPlayerAdaptor::PlayPause()
{
    // handle method call org.mpris.MediaPlayer2.Player.PlayPause
    m_playerPrivate->PlayPause();
}

void MprisPlayerAdaptor::Previous()
{
    // handle method call org.mpris.MediaPlayer2.Player.Previous
    m_playerPrivate->Previous();
}

void MprisPlayerAdaptor::Seek(qlonglong Offset)
{
    // handle method call org.mpris.MediaPlayer2.Player.Seek
    m_playerPrivate->Seek(Offset);
}

void MprisPlayerAdaptor::SetPosition(const QDBusObjectPath &TrackId, qlonglong Position)
{
    // handle method call org.mpris.MediaPlayer2.Player.SetPosition
    m_playerPrivate->SetPosition(TrackId, Position);
}

void MprisPlayerAdaptor::Stop()
{
    // handle method call org.mpris.MediaPlayer2.Player.Stop
    m_playerPrivate->Stop();
}

